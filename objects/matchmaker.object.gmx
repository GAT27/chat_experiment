<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///LOADER

//Random names
randomize();
username = choose("T ester","W illiam","E frucht","J uls",
                  "Jams","Kee ta","Gat","Ozen king",
                  "Fenelus","Comp oser","Foy","Falco",
                  "Yellow Swag");
users = ds_grid_create(3,1);

//Basic setup
online = 0;
show_host = 0;
punch = 0;
instance_create(480,250,bubble_connect);
instance_create(480,350,bubble_sound);
draw_set_font(swis);
connect_txt = "CONNECT";
sound_txt = "VOICE OFF";

//Sound setup
rec = 0;
noise = 0;
buffer_pak = buffer_create(4,buffer_grow,1);
abuff = buffer_create(4,buffer_grow,1);
vbuff = buffer_create(4,buffer_grow,1);
pbuff = buffer_create(1000,buffer_fixed,1);
repair = 0;
c_give = c_orange;
c_take = c_orange;
burst = 40;

//Mic check
for (var mic=audio_get_recorder_count();mic&gt;0;mic--)
{   var r = ds_map_create();
    r = audio_get_recorder_info(mic-1);
    show_debug_message("name: " + string(r[?"name"]));
    show_debug_message("index: " + string(r[?"index"]));
    show_debug_message("data_format: " + string(r[?"data_format"]));
    show_debug_message("sample_rate: " + string(r[?"sample_rate"]));
    show_debug_message("channels: " + string(r[?"channels"]));
    ds_map_destroy(r);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>make_host_end</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>c_take</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>c_orange</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>c_give</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>c_orange</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>QCLOUD</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string>99</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///SENDER

if mouse_check_button_pressed(mb_left)
{   clicked = instance_position(mouse_x,mouse_y,all);
    //Connection press
    if instance_exists(bubble_connect) and clicked==bubble_connect.id
    {   if online
        {   end_host = 1;
            QCLOUD(2);
            with bubble_interlink instance_destroy();
            ds_grid_resize(users,3,1);
            ds_grid_clear(users,0);
            audio_free_buffer_sound(noise);
            buffer_delete(vbuff);
            connect_txt = "CONNECT";
        }
        else if punch
        {   alarm[4] = -1;
            if make_host_end
                end_host = 1;
            QCLOUD(2);
            alarm[1] = 1;
            instance_create(480,350,bubble_sound);
            connect_txt = "CONNECT";
        }
        else if show_host
        {   end_host = 1;
            QCLOUD(2);
            with bubble_host instance_destroy();
            instance_create(480,350,bubble_sound);
            connect_txt = "CONNECT";
        }
        else
        {   make_host_end = 0;
            QCLOUD(1);
            with bubble_connect instance_destroy();
            with bubble_sound instance_destroy();
            connect_txt = "DISCONNECT";
        }
    }
    //Hosting press
    else if instance_exists(bubble_host) and clicked and clicked.object_index==bubble_host
    {   QCLOUD(clicked);
        alarm[4] = room_speed * 5;
        with bubble_host instance_destroy();
    }
    //Voice press
    else if instance_exists(bubble_sound) and clicked==bubble_sound.id
    {   if rec
        {   rec = 1;
            instance_create(480,250,bubble_connect);
            audio_stop_recording(channel);
            sound_txt = "VOICE OFF";
        }
        else
        {   rec = burst + 1;
            with bubble_connect instance_destroy();
            channel = audio_start_recording(0);
            sound_txt = "VOICE ON";
        }
        show_debug_message(sound_txt);
    }
    //Interlink clients
    else if instance_exists(bubble_interlink) and clicked==bubble_interlink.id
    {   buffer_seek(pbuff,buffer_seek_start,0);
        buffer_write(pbuff,buffer_string,ds_grid_write(users));
        for (var i=0;i&lt;ds_grid_height(users);i++)
            network_send_udp(peer,users[#1,i],users[#2,i],pbuff,987);
    }
}

rec = clamp(rec-1,0,rec);
if rec == burst
{   buffer_resize(buffer_pak,4);
    full_l = 0;
}
if (rec==2) or (rec==1)
{   //Send voice
    if online
    {   /*if (host and keep_host) */for (var i=0;i&lt;ds_grid_height(users);i++)
        {   buffer_seek(pbuff,buffer_seek_start,0);
            buffer_write(pbuff,buffer_bool,1);
            network_send_udp(peer,users[#1,i],users[#2,i],pbuff,12);
            for (var j=0;j&lt;ceil(burst*28.8/room_speed);j++)
            {   buffer_copy(buffer_pak,j*1000,1000,pbuff,0);
                nettest = network_send_udp(peer,users[#1,i],users[#2,i],
                                           pbuff,buffer_get_size(pbuff));
            }
            buffer_seek(pbuff,buffer_seek_start,0);
            buffer_write(pbuff,buffer_bool,0);
            network_send_udp(peer,users[#1,i],users[#2,i],pbuff,12);
        }
        /*//Host to multiple clients//Client to host and host to single client
        else
        {   buffer_seek(pbuff,buffer_seek_start,0);
            buffer_write(pbuff,buffer_bool,1);
            network_send_udp(peer,ipp[0],ipp[1],pbuff,12);
            for (var j=0;j&lt;ceil(burst*28.8/room_speed);j++)
            {   buffer_copy(buffer_pak,j*1000,1000,pbuff,0);
                nettest = network_send_udp(peer,ipp[0],ipp[1],
                                           pbuff,buffer_get_size(pbuff));
            }
            buffer_seek(pbuff,buffer_seek_start,0);
            buffer_write(pbuff,buffer_bool,0);
            network_send_udp(peer,ipp[0],ipp[1],pbuff,12);
        }*/
        /*else
        {   buffer_seek(pbuff,buffer_seek_start,0);
            buffer_write(pbuff,buffer_u32,$dec0adde);
            buffer_write(pbuff,buffer_u8,$0c);
            buffer_write(pbuff,buffer_u32,$0000000c);
            buffer_write(pbuff,buffer_u8,$00);
            buffer_write(pbuff,buffer_u8,$00);
            buffer_write(pbuff,buffer_u8,$00);
            buffer_write(pbuff,buffer_bool,1);
            network_send_udp_raw(peer,ipp[0],ipp[1],pbuff,12);
            buffer_fill(pbuff,5,buffer_u32,$000003e8,4);
            for (var j=0;j&lt;ceil(burst*28.8/room_speed);j++)
            {   buffer_copy(buffer_pak,j*1000,1000,pbuff,12);
                nettest = network_send_udp_raw(peer,ipp[0],ipp[1],
                                           pbuff,buffer_get_size(pbuff)-12);
            }
            buffer_seek(pbuff,buffer_seek_start,0);
            buffer_write(pbuff,buffer_u32,$dec0adde);
            buffer_write(pbuff,buffer_u8,$0c);
            buffer_write(pbuff,buffer_u32,$0000000c);
            buffer_write(pbuff,buffer_u8,$00);
            buffer_write(pbuff,buffer_u8,$00);
            buffer_write(pbuff,buffer_u8,$00);
            buffer_write(pbuff,buffer_bool,0);
            network_send_udp_raw(peer,ipp[0],ipp[1],pbuff,12);
        }*/
        if nettest &gt;= 0
        {   c_give = c_red;
            alarm[2] = burst / 3;
        }
    }
    //Test voice
    else
    {   audio_free_buffer_sound(noise);
        buffer_delete(abuff);
        abuff = buffer_create(4,buffer_grow,1);
        buffer_copy(buffer_pak,0,full_l,abuff,0);
        noise = audio_create_buffer_sound(abuff,buffer_s16,16000,0,full_l,audio_3d);
        ns = audio_play_sound(noise,2,false);
        audio_sound_pitch(ns,(burst-2) / (burst-3));
        //show_debug_message("bytes: " + string(full_l));
        //show_debug_message("pitch: " + string(audio_sound_get_pitch(noise)));
        //show_debug_message("gain: " + string(audio_sound_get_gain(noise)));
    }
    
    if rec == 2
        rec = burst + 1;
    else
        rec--;
}

//Receive voice
if online and buffer_get_size(vbuff)==8
{   buffer_copy(abuff,0,buffer_get_size(abuff),vbuff,0);
    noise = audio_create_buffer_sound(vbuff,buffer_s16,16000,
                                      0,buffer_get_size(abuff),audio_3d);
    ns = audio_play_sound(noise,2,false);
    audio_sound_pitch(ns,(burst-2) / (burst-3));
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///RECORDING

if async_load[?"channel_index"] == channel
{   part_l = async_load[?"data_len"];
    buffer_copy(async_load[?"buffer_id"],0,part_l,buffer_pak,full_l);
    full_l += part_l;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///CONNECTION

voice_l = async_load[?"size"];
if async_load[?"type"]==network_type_data and (voice_l&gt;8)
{   var buff = async_load[?"buffer"];
    //Start or end of broken buffer
    if voice_l == 12
    {   if buffer_read(buff,buffer_bool)//Start
        {   buffer_resize(abuff,4);
            repair = 1;
        }
        else if repair//End
        {   audio_free_buffer_sound(noise);
            buffer_delete(vbuff);
            vbuff = buffer_create(8,buffer_grow,1);
            c_take = merge_color(c_navy,c_lime,
                                 clamp((buffer_get_size(abuff)*room_speed)/(28800*burst),0,1));
            alarm[3] = burst / 3;
            repair = 0;
        }
    }
    //Update user list
    else if voice_l == 987
    {   var u = ds_grid_create(3,9);
        var g = 1;
        ds_grid_read(u,buffer_read(buff,buffer_string));
        for (var i=0;i&lt;ds_grid_height(u);i++)
        {   if u[#1,i]!=0 and (ip!=u[#1,i] or port!=u[#2,i])
            for (var j=0;j&lt;ds_grid_height(users);j++)
            {   if users[#1,j]==u[#1,i] and users[#2,j]==u[#2,i]
                {   g = 0;
                    break;
                }
            }
            else
                continue;
            if g
            {   ds_grid_resize(users,3,ds_grid_height(users)+1);
                users[#0,ds_grid_height(users)-1] = u[#0,i];
                users[#1,ds_grid_height(users)-1] = u[#1,i];
                users[#2,ds_grid_height(users)-1] = u[#2,i];
            }
            else
                g = 1;
        }
        ds_grid_destroy(u);
    }
    //Buffer rebuild
    else if repair
    {   if buffer_get_size(abuff) &gt; 1.1*burst*28800/room_speed
            repair = 0;
        else
            buffer_copy(buff,0,voice_l,abuff,buffer_get_size(abuff));
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///RENDEZVOUS

response = QCLOUD(0);
if response == 1
{   var uy = ds_grid_height(users);
    if !instance_exists(bubble_sound)
    {   instance_create(480,350,bubble_sound);
        if host
            instance_create(480,150,bubble_interlink);
        buffer_delete(vbuff);
        vbuff = buffer_create(4,buffer_grow,1);
    }
    else
    {   uy++;
        ds_grid_resize(users,3,uy);
    }
    users[#0,uy-1] = userother;
    /*if host and keep_host
    {*/   users[#1,uy-1] = ipp_ex[0];
        users[#2,uy-1] = ipp_ex[1];
    //}
}
else if response == -1
{   if instance_exists(bubble_host) with bubble_host instance_destroy();
    if !instance_exists(bubble_connect) instance_create(480,250,bubble_connect);
    if !instance_exists(bubble_sound) instance_create(480,350,bubble_sound);
    connect_txt = "CONNECT";
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DISPLAY

if show_host
{   //Hosting bubble
    if show_host == 2
    {   instance_create(480,250,bubble_connect);
        var bub = instance_create(0,0,bubble_host);
        bub.ble = "0~0";
        var bub = instance_create(350,0,bubble_host);
        bub.ble = "0~0.1";
    }
    draw_text_transformed_color(0,0,"HOST",
                                room_width/view_wview[0],room_height/view_hview[0],
                                0,c_red,c_red,c_red,c_red,1);
    draw_text_transformed_color(350,0,"OPEN HOST",
                                room_width/view_wview[0],room_height/view_hview[0],
                                0,c_red,c_red,c_red,c_red,1);
    
    //Lobby bubble
    for (var i=0;i!=ds_list_size(hip);i++)
    {   if show_host == 2
        {   bub = instance_create(0,48+48*i,bubble_host);
            bub.ble = ds_list_find_value(hip[|i],0);
        }
        var line = ds_list_find_value(hip[|i],0);
        draw_text_transformed_color(0,48+48*i,string_copy(line,1,string_pos('~',line)-1),
                                    room_width/view_wview[0],room_height/view_hview[0],
                                    0,c_blue,c_blue,c_blue,c_blue,1);
    }
    show_host = 1;
}

//Namelist
draw_set_halign(fa_right);
draw_text_transformed_color(room_width,0,username,
                            room_width/view_wview[0],room_height/view_hview[0],
                            0,c_give,c_take,c_take,c_give,1);
for (var i=0;i&lt;ds_grid_height(users);i++)
    draw_text_transformed_color(room_width,48+48*i,users[#0,i],
                                room_width/view_wview[0],room_height/view_hview[0],
                                0,c_orange,c_orange,c_orange,c_orange,1);
draw_set_halign(fa_left);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="90">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>window_set_position(display_get_width()-window_get_width()-10,10);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
